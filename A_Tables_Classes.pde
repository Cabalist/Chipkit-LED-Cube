// This is where the font is stored for display of text. DO NOT MODIFY!
// It is stored in program memory, not RAM.
// Also stored here, after the font table, are the tables we use for rotational math.
// Also storted here is our sprite class definition

byte  const myfont[870][8]  = {
// Space
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // ! Exclamation Point
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // "  (Don't Use for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // #  (Can be used for custom character)
// Custom - Arrow
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 1, 1, 1, 1, 0, 0, },
{ 0, 1, 1, 1, 1, 1, 1, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
  // $ Dollar Sign
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 1, 0, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 1, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // %  (Can be used for custom character)
// Custom - BigX
{ 1, 0, 0, 0, 0, 0, 0, 1, },
{ 0, 1, 0, 0, 0, 0, 1, 0, },
{ 0, 0, 1, 0, 0, 1, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 1, 0, 0, 1, 0, 0, },
{ 0, 1, 0, 0, 0, 0, 1, 0, },
{ 1, 0, 0, 0, 0, 0, 0, 1, },
  // &  (Can be used for custom character)
// Custom - ifi
{ 0, 1, 1, 1, 1, 1, 1, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 0, },
{ 0, 1, 1, 1, 1, 1, 1, 1, },
{ 0, 0, 0, 0, 1, 0, 0, 1, },
{ 0, 0, 0, 0, 1, 0, 0, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 0, },
{ 0, 1, 1, 1, 1, 1, 1, 1, },
  // '  (Can be used for custom character)
//  Custom - TG
{ 0, 0, 0, 0, 0, 0, 0, 1, },
{ 0, 0, 0, 1, 1, 1, 1, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 0, },
{ 0, 0, 0, 1, 1, 1, 1, 1, },
{ 0, 0, 0, 1, 0, 0, 0, 1, },
{ 0, 0, 0, 1, 0, 1, 0, 1, },
{ 0, 0, 0, 1, 1, 1, 0, 1, },
  // (  (Can be used for custom character)
// Custom - CommodoreSymbol
{ 0, 0, 0, 1, 1, 1, 0, 0, },
{ 0, 0, 1, 1, 1, 1, 1, 0, },
{ 0, 1, 1, 1, 0, 1, 1, 1, },
{ 0, 1, 1, 0, 0, 0, 1, 1, },
{ 0, 1, 1, 0, 0, 0, 1, 1, },
{ 0, 0, 1, 1, 0, 1, 1, 0, },
{ 0, 0, 1, 1, 0, 1, 1, 0, },
{ 0, 0, 1, 0, 0, 0, 1, 0, },
  // )  (Can be used for custom character)
// Custom - Heart
{ 0, 0, 0, 0, 1, 1, 0, 0, },
{ 0, 0, 1, 1, 1, 1, 1, 0, },
{ 0, 1, 1, 1, 1, 1, 0, 0, },
{ 1, 1, 1, 1, 1, 0, 0, 0, },
{ 0, 1, 1, 1, 1, 1, 0, 0, },
{ 0, 0, 1, 1, 1, 1, 1, 0, },
{ 0, 0, 0, 0, 1, 1, 0, 0, },
{ 0, 0, 0, 0, 0, 0, 0, 0, },
  // *  (Can be used for custom character)
//  Custom - Omega
{ 1, 1, 0, 1, 1, 1, 0, 0, },
{ 1, 0, 0, 1, 0, 0, 1, 0, },
{ 1, 1, 1, 0, 0, 0, 0, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 1, },
{ 0, 0, 0, 0, 0, 0, 0, 1, },
{ 1, 1, 1, 0, 0, 0, 0, 1, },
{ 1, 0, 0, 1, 0, 0, 1, 0, },
{ 1, 1, 0, 1, 1, 1, 0, 0, },
  // + Plus Sign
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // , Comma
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // - Minus Sign or Dash
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // . Period
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  //  /  (Can be used for custom character)
// Custom - Face
{ 0, 0, 0, 1, 1, 1, 0, 0, },
{ 0, 0, 1, 0, 0, 0, 1, 0, },
{ 0, 1, 0, 1, 0, 1, 0, 1, },
{ 0, 1, 0, 1, 1, 0, 0, 1, },
{ 0, 1, 0, 1, 0, 1, 0, 1, },
{ 0, 0, 1, 0, 0, 0, 1, 0, },
{ 0, 0, 0, 1, 1, 1, 0, 0, },
{ 0, 0, 0, 0, 0, 0, 0, 0, },
  // 0
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 1
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 2
  { 
    0, 1, 1, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 3
  { 
    0, 0, 1, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 4
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 0, 1, 1, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 5
  { 
    0, 0, 1, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 6
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 7
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 8
  { 
    0, 0, 1, 1, 0, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // 9
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // :  (Can be used for custom character)
// Custom - ST
{ 0, 0, 0, 0, 0, 0, 0, 0, },
{ 0, 1, 0, 1, 0, 0, 1, 0, },
{ 0, 1, 0, 1, 0, 1, 0, 1, },
{ 0, 1, 0, 0, 1, 0, 0, 1, },
{ 0, 1, 0, 0, 0, 0, 0, 0, },
{ 0, 1, 0, 0, 0, 0, 0, 1, },
{ 0, 1, 0, 1, 1, 1, 1, 1, },
{ 0, 1, 0, 0, 0, 0, 0, 1, },
  // ;  (Can be used for custom character)
// Custom -  Star
{ 1, 0, 0, 1, 0, 0, 0, 1, },
{ 0, 1, 0, 1, 0, 0, 1, 0, },
{ 0, 0, 1, 1, 0, 1, 0, 0, },
{ 0, 0, 0, 1, 1, 1, 1, 1, },
{ 1, 1, 1, 1, 1, 0, 0, 0, },
{ 0, 0, 1, 0, 1, 1, 0, 0, },
{ 0, 1, 0, 0, 1, 0, 1, 0, },
{ 1, 0, 0, 0, 1, 0, 0, 1, },
  // <  (Can be used for custom character)
//Custom - SpaceInvader
{ 1, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 1, 0, 1, 1, 1, 0, 0, },
{ 1, 0, 1, 1, 0, 1, 1, 0, },
{ 0, 1, 0, 1, 1, 1, 1, 1, },
{ 0, 1, 0, 1, 1, 1, 1, 1, },
{ 1, 0, 1, 1, 0, 1, 1, 0, },
{ 0, 1, 0, 1, 1, 1, 0, 0, },
{ 1, 0, 0, 1, 1, 0, 0, 0, },
  // = Equal Sign
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // >   (Can be used for custom character)
 // Custom - Fish
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 0, 1, 0, 0, 1, 0, 0, },
{ 0, 1, 0, 0, 1, 0, 1, 0, },
{ 0, 1, 0, 0, 0, 0, 1, 0, },
{ 0, 1, 0, 0, 0, 0, 1, 0, },
{ 0, 0, 1, 0, 0, 1, 0, 0, },
{ 0, 0, 0, 1, 1, 0, 0, 0, },
{ 0, 1, 1, 1, 1, 1, 1, 0, },
  // ? Question Mark
  { 
    0, 0, 0, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // @   (Can be used for custom character)
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // A
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // B
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // C
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 1, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // X
  { 
    0, 1, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // Y
  { 
    0, 0, 0, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // Z
  { 
    0, 1, 0, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 1, 1, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // [  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // Backslash  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // ]  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,         }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,         }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,         }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,         }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,         }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,         }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,         }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,         }
  ,
  // ^  (Can be used for custom character)
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // _  (Can be used for custom character)
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // `  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // a
  { 
    0, 0, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // b
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // c
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    1, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    1, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // x
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 1, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // y
  { 
    1, 0, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    1, 0, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 0, 1, 0, 0, 0, 0, 0,                 }
  ,
  { 
    1, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // z
  { 
    0, 1, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 1, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 0, 0, 1, 1, 0, 0,                 }
  ,
  { 
    0, 1, 1, 0, 0, 1, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // {  (Can be used for custom character)
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // |  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 1, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // }  (Can be used for custom character)
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 1, 1, 1, 0, 1, 1, 1,                 }
  ,
  { 
    0, 0, 1, 1, 1, 1, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 1, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // ~  (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 1, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 1,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  // Del (Can be used for custom character)
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
  { 
    0, 0, 0, 0, 0, 0, 0, 0,                 }
  ,
};

// This table gives us the angle in radians to each LED from the center of the cube, for one layer.
float const angle[8][8] = {
{5.49778183660255,5.662930514,5.878288214,6.141282945,0.141897055,0.404891786,0.620249486,0.785398163,},
{5.33263315918792,5.497781837,5.7427605,6.08578444,0.19739556,0.5404195,0.785398163,0.950546841,},
{5.11727545949019,5.252803173,5.497781837,5.961429446,0.321750554,0.785398163,1.030376827,1.165904541,},
{4.85428072780927,4.909779233,5.034134228,5.497781837,0.785398163,1.249045772,1.373400767,1.428899272,},
{4.57048927219073,4.514990767,4.390635772,3.926988163,2.356191837,1.892544228,1.768189233,1.712690728,},
{4.30749454050981,4.171966827,3.926988163,3.463340554,2.819839446,2.356191837,2.111213173,1.975685459,},
{4.09213684081208,3.926988163,3.6820095,3.33898556,2.94419444,2.6011705,2.356191837,2.191043159,},
{3.92698816339745,3.761839486,3.546481786,3.283487055,2.999692945,2.736698214,2.521340514,2.356191837,},
};

// This table gives us the distance of each LED from the center of the cube, for one layer. 
float const distance[8][8] = {
{4.949747468,4.301162634,3.807886553,3.535533906,3.535533906,3.807886553,4.301162634,4.949747468,},
{4.301162634,3.535533906,2.915475947,2.549509757,2.549509757,2.915475947,3.535533906,4.301162634,},
{3.807886553,2.915475947,2.121320344,1.58113883,1.58113883,2.121320344,2.915475947,3.807886553,},
{3.535533906,2.549509757,1.58113883,0.707106781,0.707106781,1.58113883,2.549509757,3.535533906,},
{3.535533906,2.549509757,1.58113883,0.707106781,0.707106781,1.58113883,2.549509757,3.535533906,},
{3.807886553,2.915475947,2.121320344,1.58113883,1.58113883,2.121320344,2.915475947,3.807886553,},
{4.301162634,3.535533906,2.915475947,2.549509757,2.549509757,2.915475947,3.535533906,4.301162634,},
{4.949747468,4.301162634,3.807886553,3.535533906,3.535533906,3.807886553,4.301162634,4.949747468,}
};

// This table gives us the sine and cosine for each 0.05 radians from 0 to 2 pi.  To find the 
// sin or cos you need, the row you need in this table is int(myAngle*20 +.5) with sin in the 
// first column and cos in the second.  
float const sin_cos[126][2] = {
{0,1,},
{0.049979169,0.99875026,},
{0.099833417,0.995004165,},
{0.149438132,0.988771078,},
{0.198669331,0.980066578,},
{0.247403959,0.968912422,},
{0.295520207,0.955336489,},
{0.342897807,0.939372713,},
{0.389418342,0.921060994,},
{0.434965534,0.900447102,},
{0.479425539,0.877582562,},
{0.522687229,0.852524522,},
{0.564642473,0.825335615,},
{0.605186406,0.796083799,},
{0.644217687,0.764842187,},
{0.68163876,0.731688869,},
{0.717356091,0.696706709,},
{0.751280405,0.659983146,},
{0.78332691,0.621609968,},
{0.813415505,0.581683089,},
{0.841470985,0.540302306,},
{0.867423226,0.497571048,},
{0.89120736,0.453596121,},
{0.91276394,0.408487441,},
{0.932039086,0.362357754,},
{0.948984619,0.315322362,},
{0.963558185,0.267498829,},
{0.975723358,0.219006687,},
{0.98544973,0.169967143,},
{0.992712991,0.120502769,},
{0.997494987,0.070737202,},
{0.999783764,0.020794828,},
{0.999573603,-0.029199522,},
{0.996865028,-0.079120889,},
{0.99166481,-0.128844494,},
{0.983985947,-0.178246056,},
{0.973847631,-0.227202095,},
{0.961275203,-0.275590247,},
{0.946300088,-0.323289567,},
{0.928959715,-0.370180831,},
{0.909297427,-0.416146837,},
{0.887362369,-0.461072691,},
{0.863209367,-0.504846105,},
{0.836898791,-0.547357665,},
{0.808496404,-0.588501117,},
{0.778073197,-0.628173623,},
{0.745705212,-0.666276021,},
{0.711473353,-0.702713077,},
{0.675463181,-0.737393716,},
{0.637764702,-0.770231254,},
{0.598472144,-0.801143616,},
{0.557683717,-0.830053535,},
{0.515501372,-0.856888753,},
{0.472030541,-0.881582196,},
{0.42737988,-0.904072142,},
{0.381660992,-0.924302379,},
{0.33498815,-0.942222341,},
{0.287478012,-0.957787238,},
{0.239249329,-0.970958165,},
{0.190422647,-0.981702203,},
{0.141120008,-0.989992497,},
{0.091464642,-0.995808325,},
{0.041580662,-0.99913515,},
{-0.008407247,-0.999964658,},
{-0.058374143,-0.998294776,},
{-0.108195135,-0.994129676,},
{-0.157745694,-0.98747977,},
{-0.206901972,-0.978361679,},
{-0.255541102,-0.966798193,},
{-0.303541513,-0.952818215,},
{-0.350783228,-0.936456687,},
{-0.397148167,-0.917754506,},
{-0.442520443,-0.896758416,},
{-0.486786649,-0.873520898,},
{-0.529836141,-0.848100032,},
{-0.571561319,-0.820559357,},
{-0.611857891,-0.790967712,},
{-0.650625137,-0.759399059,},
{-0.687766159,-0.725932304,},
{-0.723188124,-0.690651097,},
{-0.756802495,-0.653643621,},
{-0.788525254,-0.615002377,},
{-0.818277111,-0.574823947,},
{-0.845983701,-0.533208756,},
{-0.871575772,-0.490260821,},
{-0.894989358,-0.44608749,},
{-0.916165937,-0.400799172,},
{-0.935052578,-0.354509065,},
{-0.951602074,-0.30733287,},
{-0.965773061,-0.259388503,},
{-0.977530118,-0.210795799,},
{-0.986843859,-0.161676216,},
{-0.993691004,-0.112152527,},
{-0.998054439,-0.062348515,},
{-0.999923258,-0.012388663,},
{-0.999292789,0.037602153,},
{-0.996164609,0.087498983,},
{-0.990546536,0.137177112,},
{-0.982452613,0.186512369,},
{-0.971903069,0.235381443,},
{-0.958924275,0.283662185,},
{-0.943548669,0.33123392,},
{-0.925814682,0.377977743,},
{-0.905766641,0.423776818,},
{-0.883454656,0.468516671,},
{-0.858934493,0.512085477,},
{-0.832267442,0.554374336,},
{-0.803520156,0.595277548,},
{-0.772764488,0.634692876,},
{-0.74007731,0.672521802,},
{-0.705540326,0.708669774,},
{-0.669239857,0.743046441,},
{-0.631266638,0.775565879,},
{-0.591715581,0.806146805,},
{-0.550685543,0.834712785,},
{-0.508279077,0.861192417,},
{-0.464602179,0.885519517,},
{-0.419764018,0.907633279,},
{-0.373876665,0.927478431,},
{-0.327054815,0.945005369,},
{-0.279415498,0.960170287,},
{-0.231077788,0.972935278,},
{-0.182162504,0.983268438,},
{-0.132791909,0.99114394,},
{-0.083089403,0.996542097,},
{-0.033179217,0.999449418,}
};


// The following is the definition of the sprite object class
// DO NOT MODIFY (or at least - Modify at your own risk!)
 class sprite {
  private:
    int lock;
    int buffer[4][4][4];
    void copyBack() {  // copies the buffer content back into the description array
      for (int x= 0; x<4; x++){
        for (int y= 0; y<4; y++){
          for (int z= 0; z<4; z++){
             description[x][y][z]=buffer[x][y][z];
          }
        }    
      }
    }
  public: 
    int myX; // these are just the X,Y,and Z dimensions of a particular sprite instance.
    int myY;
    int myZ;
  // The following is a constuctor that lets us specify the dimensons of a sprite instance.
  // can be specified from 1,1,1 (default) up to 4,4,4 (but doesn't have to be a cube)
   sprite(int msizeX=1, int msizeY=1, int msizeZ=1){
     myX = msizeX;
     myY = msizeY;
     myZ = msizeZ;
   } 
   ~sprite(){
     ;}  // destructor; opposite of constructor.  Releases the resources. 
  // The following are the 3 properties of the sprite
  // Note: description is constructed 7-z,x,y, out of order 
  // and with z reversed, to aid in builting it visually.  See examples to see why.  
  int description[4][4][4];  // describes its shape and color of a sprite instance.
  int place[3];  // specifies the lower corner of the position of the sprite
  int motion [3]; // specifies the direction it will move when asked to move
  // The following are the 4 methods or actions of the sprite class 
  void setIt(){  // this displays the sprite in the cube at it's specified place
    for (int x= 0; x<myX; x++){
      for (int y= 0; y<myY; y++){
        for (int z= 0; z<myZ; z++){
          if (x+place[0]>-1 && x+place[0]<8 && y+place[1]>-1 && y+place[1]<8 && myZ-1-z+place[2]>-1 && myZ-1-z+place[2]<8){
            getColor(description[z][x][y],4);
            LED(x+place[0],y+place[1],myZ-1-z+place[2],myred,mygreen,myblue);
          }
        }
      }    
    }
  } 

  void clearIt(){  // this clears it from the cube at its specified place
    for (int x= 0; x<myX; x++){
      for (int y= 0; y<myY; y++){
        for (int z= 0; z<myZ; z++){
            LED(x+place[0],y+place[1],myZ-1-z+place[2],0,0,0);
        }
      }    
    }
  } 
  // The next action is the easy way to describe a sprite.  Fills the whole thing with one color.
  void colorIt(int mycolor){  // makes the whole description array one color
    for (int x= 0; x<4; x++){
      for (int y= 0; y<4; y++){
        for (int z= 0; z<4; z++){
            description[x][y][z]=mycolor;
        }
      }    
    }
  }
  void moveIt() {  // this moves it by one step in its specified direction of motion
    clearIt();
    place[0]=place[0]+motion[0];
    place[1]=place[1]+motion[1];
    place[2]=place[2]+motion[2];
    setIt();
  }

  void bounceIt() { // this moves it but also checks for edges of the cube.
      moveIt();     // if an edge is hit, direction in that one plane is reversed. 
      if (place[0]<1 && motion[0]<0){motion[0]=-motion[0];}
      if (place[1]<1 && motion[1]<0){motion[1]=-motion[1];}
      if (place[2]<1 && motion[2]<0){motion[2]=-motion[2];}
      if (place[0]>7-myX && motion[0]>0){motion[0]=-motion[0];}
      if (place[1]>7-myY && motion[1]>0){motion[1]=-motion[1];}
      if (place[2]>7-myZ && motion[2]>0){motion[2]=-motion[2];}
  }
   // for the next 6 actions, dir = 0 is clockwise rotation, while dir = 1 is counter-clockwise. 
     void rollX(int dir) { // this rotates the sprite around the edge of the cube around X axis
      lock = 0;
      if (dir== 0){
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == -1) {
          lock= 1; 
          if (place[2]<1){motion[0] = 0; motion[1] = -1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == -1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]<1){motion[0] = 0; motion[1] = 0; motion[2] = 1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == 1) {
          lock= 1; 
          if (place[2]>7-myX){motion[0] = 0; motion[1] = 1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == 1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]>7-myY){motion[0] = 0; motion[1] = 0; motion[2] = -1;}
        }
        if (lock<1 && place[0]<7-myX) {
          motion[0] = 0; motion[1] = 0; motion[2] = -1;
        }
        if (lock<1 && place[0]==7-myX) {
          motion[0] = 0; motion[1] = -1; motion[2] = 0;
        }
      }
      else {  
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == 1) {
          lock= 1; 
          if (place[2]>7-myZ){motion[0] = 0; motion[1] = -1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == 1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]>7-myY){motion[0] = 0; motion[1] = 0; motion[2] = 1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == -1) {
          lock= 1; 
          if (place[2]<1){motion[0] = 0; motion[1] = 1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == -1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]<1){motion[0] = 0; motion[1] = 0; motion[2] = -1;}
        }
        if (lock<1 && place[2]<7-myZ) {
          motion[0] = 0; motion[1] = 0; motion[2] = 1;
        }
        if (lock<1 && place[2]==7-myX) {
          motion[0] = 0; motion[1] = 1; motion[2] = 0;
        }
      }   
      moveIt();     // move on step
  }
  
     void rollY(int dir) { // this rotate the sprite around the edge of the cube around Y axis
      lock = 0;
      if (dir== 0){
        if (motion[0] == 1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]>7-myX){motion[0] = 0; motion[1] = 0; motion[2] = -1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == 1) {
          lock= 1; 
          if (place[2]>7-myY){motion[0] = 1; motion[1] = 0; motion[2] = 0;}
        }
        if (motion[0] == -1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]<1){motion[0] = 0; motion[1] = 0; motion[2] = 1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == -1) {
          lock= 1; 
          if (place[2]<1){motion[0] = -1; motion[1] = 0; motion[2] = 0;}
        }
        if (lock<1 && place[0]>1) {
          motion[0] = -1; motion[1] = 0; motion[2] = 0;
        }
        if (lock<1 && place[0]==0) {
          motion[0] = 0; motion[1] = 0; motion[2] = -1;
        }
      }  
      else { 
        if (motion[0] == 1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]>7-myX){motion[0] = 0; motion[1] = 0; motion[2] = 1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == 1) {
          lock= 1; 
          if (place[2]>7-myY){motion[0] = -1; motion[1] = 0; motion[2] = 0;}
        }
        if (motion[0] == -1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]<1){motion[0] = 0; motion[1] = 0; motion[2] = -1;}
        }
        if (motion[0] == 0 && motion[1] == 0 && motion[2] == -1) {
          lock= 1; 
          if (place[2]<1){motion[0] = 1; motion[1] = 0; motion[2] = 0;}
        }
        if (lock<1 && place[0]<7-myX) {
          motion[0] = 1; motion[1] = 0; motion[2] = 0;
        }
        if (lock<1 && place[0]==7-myX) {
          motion[0] = 0; motion[1] = 0; motion[2] = 1;
        }
      }   
      moveIt();     // move on step
  }
  
     void rollZ(int dir) { // this rotate the sprite around the edge of the cube around Z axis
      lock = 0;
      if (dir== 0){
        if (motion[0] == 1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]>7-myX){motion[0] = 0; motion[1] = -1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == 1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]>7-myY){motion[0] = 1; motion[1] = 0; motion[2] = 0;}
        }
        if (motion[0] == -1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]<1){motion[0] = 0; motion[1] = 1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == -1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]<1){motion[0] = -1; motion[1] = 0; motion[2] = 0;}
        }
        if (lock<1 && place[0]<7-myX) {
          motion[0] = 1; motion[1] = 0; motion[2] = 0;
        }
        if (lock<1 && place[0]==7-myX) {
          motion[0] = 0; motion[1] = 1; motion[2] = 0;
        }
      }  
      else { 
         if (motion[0] == -1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]<1){motion[0] = 0; motion[1] = -1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == -1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]<1){motion[0] = 1; motion[1] = 0; motion[2] = 0;}
        }
        if (motion[0] == 1 && motion[1] == 0 && motion[2] == 0) {
          lock= 1; 
          if (place[0]>7-myX){motion[0] = 0; motion[1] = 1; motion[2] = 0;}
        }
        if (motion[0] == 0 && motion[1] == 1 && motion[2] == 0) {
          lock= 1; 
          if (place[1]>7-myY){motion[0] = -1; motion[1] = 0; motion[2] = 0;}
        }
        if (lock<1 && place[0]<7-myX) {
          motion[0] = -1; motion[1] = 0; motion[2] = 0;
        }
        if (lock<1 && place[0]==7-myX) {
          motion[0] = 0; motion[1] = -1; motion[2] = 0;
        }
      }  
      moveIt();     // move on step
  }
  void rotateX(int dir){
      for (int x= 0; x<4; x++){
        for (int y= 0; y<4; y++){
          for (int z= 0; z<4; z++){
            if (dir==0) {
              buffer[y][x][myZ-1-z]=description[z][x][y];  // clockwise rotatation around Z 90 degrees
            }
            else {
              buffer[myY-1-y][x][z]=description[z][x][y]; // counterclockwise rotatation 90 degrees 
            }
          }
        }    
      }
      copyBack(); // bring rotated object in buffer back to description
      setIt();  // show it
    }
      void rotateY(int dir){
      for (int x= 0; x<4; x++){
        for (int y= 0; y<4; y++){
          for (int z= 0; z<4; z++){
            if (dir==0) {
              buffer[x][myZ-1-z][y]=description[z][x][y]; // clockwise rotatation around Y 90 degrees
            }
            else {
              buffer[myX-1-x][z][y]=description[z][x][y];  // counterclockwise rotatation 90 degrees 
            }
          }
        }    
      }
      copyBack();  // bring rotated object in buffer back to description
      setIt();  // show it
    }
  void rotateZ(int dir){
      for (int x= 0; x<4; x++){
        for (int y= 0; y<4; y++){
          for (int z= 0; z<4; z++){
            if (dir==0) {
              buffer[z][y][myX-1-x]=description[z][x][y]; // clockwise rotatation around Z 90 degrees
            }
            else {
              buffer[z][myY-1-y][x]=description[z][x][y]; // counterclockwise rotatation 90 degrees 
            }
          }
        }    
      }
      copyBack();  // bring rotated object in buffer back to description
      setIt();    // show it
    }

};   // end of class description

